buildscript {
    ext {
        //springboot版本
        springBootVersion = '2.0.0.RELEASE'
        fastJsonVersion = '1.2.49'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'

    group = 'com.wantup.dubbo.demo'
    version = '1.0.0-SNAPSHOT'

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        compile 'com.alibaba:dubbo:2.6.2'
        compile 'io.dubbo.springboot:spring-boot-starter-dubbo:1.0.0'
        compile group: 'org.apache.curator', name: 'curator-framework', version: '2.6.0'

        testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    }

}

subprojects {

    configurations {
        providedCompile

        all {
            resolutionStrategy {
                cacheChangingModulesFor 10, 'seconds'
                cacheDynamicVersionsFor 10, 'minutes'
            }
        }
    }

    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
    sourceSets.test.runtimeClasspath += configurations.providedCompile

    idea {
        module {
            downloadSources = true
        }
    }

    jar {
        manifest {
            attributes 'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Built-By': System.getProperty('user.name'),
                    'Built-JDK': System.getProperty('java.version'),
                    'Built-OS': "${System.getProperty('os.name')}/${System.getProperty('os.version')}",
                    'Source-Compatibility': sourceCompatibility,
                    'Target-Compatibility': targetCompatibility,
                    'Rev-Revision': version,
                    'Git-Revision': 'git rev-parse HEAD'.execute().text.trim(),
                    'Git-Branch': 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
        }
    }

    task libs(type: Sync) {
        from configurations.runtime
        into "$buildDir/lib"
    }

}
